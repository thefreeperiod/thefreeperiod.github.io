/*!
 * thefreeperiod
 * Landing Page for The Free Period
 * thefreeperiod.github.io
 * @author Ratik Sharma
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */

html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}@font-face{font-family:Apercu;src:local("Apercu Regular"),url(../fonts/apercu_regular.otf);font-weight:400}@font-face{font-family:Apercu;src:local("Apercu Regular"),url(../fonts/apercu_italic.otf);font-weight:400;font-style:italic}@font-face{font-family:Apercu;src:local("Apercu Bold"),url(../fonts/apercu_bold.otf);font-weight:700}.grid{list-style:none;margin-left:-20px}.grid__col--2-of-2{width:100%}.grid__col--1-of-2{width:50%}.grid__col--push-2-of-2{margin-left:100%}.grid__col--push-1-of-2{margin-left:50%}.grid__col--pull-2-of-2{margin-left:-100%}.grid__col--pull-1-of-2{margin-left:-50%}.grid__col{box-sizing:border-box;display:inline-block;margin-right:-.25em;min-height:1px;padding-left:20px;vertical-align:top}@media (max-width:700px){.grid__col{display:block;margin-left:0;margin-right:0;width:auto}}@media (max-width:700px) and (min-width:480px){.grid__col[class*=grid__col--m-]{display:inline-block;margin-right:-.24em}.grid__col.grid__col--m-1-of-2,.grid__col.grid__col--m-2-of-4{width:50%}.grid__col.grid__col--m-1-of-3{width:33.33333%}.grid__col.grid__col--m-2-of-3{width:66.66667%}.grid__col.grid__col--m-1-of-4{width:25%}.grid__col.grid__col--m-3-of-4{width:75%}}@media (max-width:480px){.grid__col[class*=grid__col--s-]{display:inline-block;margin-right:-.24em}.grid__col.grid__col--s-1-of-2,.grid__col.grid__col--s-2-of-4{width:50%}.grid__col.grid__col--s-1-of-3{width:33.33333%}.grid__col.grid__col--s-2-of-3{width:66.66667%}.grid__col.grid__col--s-1-of-4{width:25%}.grid__col.grid__col--s-3-of-4{width:75%}}.grid__col--centered{display:block;margin-left:auto;margin-right:auto}.grid__col--d-first{float:left}.grid__col--d-last{float:right}.grid--no-gutter{margin-left:0;width:100%}.grid--no-gutter .grid__col{padding-left:0}.grid--no-gutter .grid__col--span-all{margin-left:0;width:100%}.grid__col--ab{vertical-align:bottom}.grid__col--am{vertical-align:middle}body{font-family:Apercu;font-weight:400;line-height:1.6;font-size:1em;color:#43454b}.container{max-width:960px;margin:0 auto;padding:0 15px}a{color:#111;text-decoration:underline}section{padding:60px 0}section .container h2{text-transform:uppercase;letter-spacing:.1em;margin:0}section .container p{font-size:1.2em}.divider{width:0;height:6px;background:#e9ca23;border:none;margin-top:40px;margin-bottom:40px;transition:all .6s cubic-bezier(.4,.06,.98,.42)}.is-showing{width:90px}.right{text-align:right}header{min-height:500px;background:url(../img/hero.jpg) 50% no-repeat;background-size:cover;color:#fff}header .container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}@media screen and (max-width:480px){header .container{display:block;text-align:center}}@media screen and (max-width:480px){header{min-height:200px}}.logo{margin-top:25px}.logo h2{margin:0;padding:0;color:#e9ca23;font-size:2em}@media screen and (max-width:480px){.logo h2{padding-top:40px}}.logo h5{text-transform:uppercase;margin:0;letter-spacing:.4em;margin-top:-5px;font-size:.65em;font-weight:lighter}@media screen and (max-width:480px){.logo{margin-top:0;margin-bottom:20px}}.site-nav{margin:0;padding:0;list-style-type:none;margin-top:25px}@media screen and (max-width:480px){.site-nav{margin-top:0}}.nav-item{display:inline-block;margin:0 20px}.nav-item a{color:#fff;position:relative;text-decoration:none}.nav-item a:after{opacity:0;margin-top:29px;position:absolute;left:0;width:0;height:3px;background:#e9ca23;content:"";transition:width .3s,opacity .2s}.nav-item a:hover:after{opacity:1;width:100%}#mission{background-color:#f2f2f2;text-align:center}#about .divider{margin-left:0;margin-right:0}#apply{background-color:#e9ca23;color:#111;padding:30px 0}#apply h2{margin-bottom:50px}#apply .mushroom{max-width:100%}#apply .btn-apply{background-color:#111;color:#fff;padding:10px 40px;border-radius:3px;margin-top:20px;border:none;transition:transform .3s ease-in-out}#apply .btn-apply:hover{transform:scale(1.1)}@media screen and (max-width:480px){#apply .mushroom{display:none}#apply .right{text-align:left}}footer{padding:30px 0}footer h3{margin-top:0;text-transform:uppercase;font-weight:400}footer p{margin:0}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
